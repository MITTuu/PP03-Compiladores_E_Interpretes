package parserlexer;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import utils.SymbolsTable.SymbolTable;
import utils.AST.*;

action code 
{:     
    String currentHash;
    String currentFunction;
    String currentSwitch;
    public SymbolTable symbolTable = new SymbolTable();
:}

parser code
{:    
    private Symbol s;
  
    //Lista de errores sintácticos controlados
    public List<String> errorList = new ArrayList<>();

    //Lista de errores semánticos 
    public List<String> semanticErrorList = new ArrayList<>();
    
    // Agrega errores controlados a la lista
    public void logError(Symbol s) {
        String error = "Error cerca de Linea: " + (s.right + 1) + " Columna: " + (s.left + 1) + ", Texto: \"" + s.value + "\"";
        errorList.add(error);
    }

    // Agrega errores semánticos a la lista
    public void logSemanticError(String error) {
        semanticErrorList.add(error);
    }

    // Agrega errores controlados a la lista
    public void logError(String error) {
        errorList.add(error);
    }

    // Obtiene la lista de errores sintácticos controlados
    public List<String> getErrorList() {
        return errorList;
    }

    // Obtiene la lista de errores semánticos 
    public List<String> getSemanticErrorList() {
        return semanticErrorList;
    }

    // Gestiona errores recuperables -error-
    public void syntax_error(Symbol s){
        this.s = s;
        logError(s);
    }

    // Gestiona errores no recuperables
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String error = "\nError no recuperable:\n No se encontró final de sentencia (finregalo), \n o no se encontró final de bloque (cierracuento) \n o se determinó un error desconocido ";
        errorList.add(error);
    }

    // Método para obtener el Symbol donde se generó el error.
    public Symbol getS(){
        return this.s;
    }

    //Método para salida por consolda
    public void print(String prodName, Symbol s){
         String salida = "Encontrado " +prodName+ " : cerca de Linea: " + (s.right + 1) + " Columna: " + (s.left + 1) + ", Texto: \"" + s.value + "\"";
         //System.out.println(salida); 
    }

    public Object getSymbolTable() {
        return this.action_obj.symbolTable;
    }
:};

/* TERMINALS */

/* ---------- General ---------- */
terminal                        Main, Identifier;

/* ---------- Literals ---------- */
terminal                        IntegerLiteral, FloatLiteral, BoolLiteral, CharacterLiteral, StringLiteral;

/* ---------- Types ---------- */
terminal                        Integer, Float, Bool, Char, String;

/* ---------- Arrays ---------- */
terminal                        BracketOpening, BracketClosure;

/* ---------- Operators ---------- */
// Assignment sign
terminal                        AssignmentSign;

// Parenthesis
terminal                        ParenthesisOpening, ParenthesisClosure;

// Binary Arithmetic Operators
terminal                        Sum, Subtraction, Division, Multiplication, Module, Power;

// Unary Arithmetic Operators
terminal                        Increment, Decrement;

//Negative operator
terminal                        Negative;

// Relational Operators
terminal                        Less, LessEqual, Greater, GreaterEqual, Equal, NotEqual;

// Logical Operators
terminal                        Conjunction, Disjunction, Negation;

/* ---------- Blocks ---------- */
terminal                        BlockOpening, BlockClosure, EndSentence;                    

/* ---------- Control Structures ---------- */
terminal                        If, Else, While, For, Switch, Case, Default, Break, Return, Colon, Comma;

/* ---------- IO Operators ---------- */
terminal                        Print, Read;

/* ---------- NON TERMINALES ---------- */

non terminal PROGRAM, FUNCTION, VARIABLE_TYPE, VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT;
non terminal NEGATIVE_OPERATOR, PARAMETER_DECLARATION, PARAMETER_DECLARATION_LIST, PARAMETER_DECLARATION_OPTION; 
non terminal FUNCTION_DECLARATION,FUNCTION_CALL, FUNCTION_CALL_PARAMETER, FUNCTION_CALL_PARAMETER_LIST, FUNCTION_CALL_PARAMETER_OPTION, LITERALS ;
non terminal FUNCTION_DECLARATION_BODY, EXPRESSION, BINARY_ARITHMETIC_OPERATOR, ARITHMETIC_EXPRESSION, SIMPLE_EXPRESSION;
non terminal FUNCTION_BODY_ELEMENT, NEGATIVE_LITERAL, UNARY_ARITHMETIC_EXPRESSION, LOGICAL_OPERATOR;
non terminal CONTROL_STRUCTURE, IF_STRUCTURE, WHILE_STRUCTURE, FOR_STRUCTURE, SWITCH_STRUCTURE,CASES, CASE, DEFAULT_CASE, RETURN_STATEMENT, BREAK_STATEMENT;
non terminal PRINT_STATEMENT, READ_STATEMENT, RELATIONAL_EXPRESSION, LOGICAL_EXPRESSION, FUNCTION_NAME, ARRAY_DECLARATION,ARRAY_USE;
non terminal ARRAY_ELEMENTS, LITERAL_LIST, ELSE_STRUCTURE, ELSE_IF_STRUCTURE, IF_ELSE_STRUCTURE_TYPE, UPDATE_EXPRESSION, RELATIONAL_OPERATOR;
non terminal INIT_FOR_STRUCTURE, SWITCH_EXPRESSION, CASE_LABEL, FUNCTION_CALL_EXPRESSION, FUNCTION_LIST;

/* ---------- Precedences ---------- */

precedence left Disjunction;
precedence left Conjunction;
precedence right Negation;
precedence left Less, LessEqual, Greater, GreaterEqual, Equal, NotEqual;
precedence left Sum, Subtraction;
precedence left Multiplication, Division, Module; 
precedence right Power;
precedence right AssignmentSign; 

// Declaración del non terminal inicial
start with PROGRAM;

// Definición del non terminal inicial
PROGRAM ::= /* Vacío */ 
          | FUNCTION_LIST:funcs
            {: 
                RESULT = new ProgramNode();
                for (FunctionNode fn : (List<FunctionNode>)funcs) {
                    ((ProgramNode) RESULT).addFunction((FunctionNode)fn);
                }
            :};

FUNCTION_LIST ::= FUNCTION_LIST:funcs FUNCTION_DECLARATION:fn
                    {:
                        ((List<FunctionNode>)funcs).add((FunctionNode)fn);
                        RESULT = funcs;
                    :}
                | FUNCTION_DECLARATION:fn
                    {:
                        RESULT = new ArrayList<>();
                        ((List<FunctionNode>) RESULT).add((FunctionNode)fn);
                    :}
                | error  
                    {: 
                        RESULT = new ArrayList<>(); 
                        ((List<FunctionNode>) RESULT).add(new FunctionNode("ERROR", new ArrayList<>() ));
                    :}
                | FUNCTION_LIST:funcs error
                    {:
                          ((List<FunctionNode>)funcs).add( new FunctionNode("ERROR", new ArrayList<>() ));
                          RESULT = funcs;
                    :}
                ;

FUNCTION_DECLARATION ::= FUNCTION:fn BlockOpening FUNCTION_DECLARATION_BODY:body BlockClosure 
                         {:                             
                            RESULT = new FunctionNode(fn.toString(), (List<BodyNode>)body);
                         :}
                        ;

FUNCTION ::= VARIABLE_TYPE:type FUNCTION_NAME:name 
             ParenthesisOpening PARAMETER_DECLARATION_OPTION:params ParenthesisClosure 
                {:
                    currentHash = name.toString();
                    currentFunction = name.toString();

                    if(!symbolTable.containsFunctionKey(currentHash))
                    {
                        symbolTable.addFunction(name.toString(), type.toString(), params.toString());                    
                    }

                    RESULT = type.toString() + ":" + name.toString() + ":" + params.toString();
                :}
           ;


VARIABLE_TYPE ::= Integer {: RESULT = "Integer"; :}
                | Float   {: RESULT = "Float";   :}
                | String  {: RESULT = "String";  :}
                | Bool    {: RESULT = "Bool";    :}
                | Char    {: RESULT = "Char";    :}
                ;

FUNCTION_NAME ::= Identifier:id {: RESULT = id.toString(); :}
                | Main          {: RESULT = "Main";        :}
                ;

PARAMETER_DECLARATION ::= VARIABLE_TYPE:type Identifier:id 
                          {: RESULT = type.toString() + "@&@" + id.toString(); :}
                        ;

PARAMETER_DECLARATION_LIST ::= PARAMETER_DECLARATION:param 
                               {: RESULT = param.toString(); :}
                             | PARAMETER_DECLARATION_LIST:list  Comma PARAMETER_DECLARATION:param
                               {: RESULT = param.toString() + ";" + list.toString(); :}
                             ;

PARAMETER_DECLARATION_OPTION ::= /* Vacío */ 
                                 {: RESULT = ""; :}
                               | PARAMETER_DECLARATION_LIST:params 
                                 {: RESULT = params.toString(); :}
                               ;


FUNCTION_DECLARATION_BODY ::= FUNCTION_BODY_ELEMENT:body 
                              {: 
                                RESULT = new ArrayList<>();  
                                ((List<BodyNode>)RESULT).add((BodyNode)body) ; 
                              :} 
                            | FUNCTION_DECLARATION_BODY:bodyList FUNCTION_BODY_ELEMENT:body
                              {:
                                ((List<BodyNode>)bodyList).add((BodyNode)body);                               
                                RESULT = bodyList; 
                              :}
                            ;

FUNCTION_BODY_ELEMENT ::= VARIABLE_DECLARATION:e {: RESULT = new BodyNode("VARIABLE-Declaración", (ASTNode)e); :}
                        | VARIABLE_ASSIGNMENT:e {: RESULT = new BodyNode("VARIABLE-Asignación", (ASTNode)e); :}
                        | FUNCTION_CALL_EXPRESSION:e {: RESULT = new BodyNode("FUNCIÓN-Llamada", (ASTNode)e); :}
                        | CONTROL_STRUCTURE:e {: RESULT = new BodyNode("ESTRUCTURA DE CONTROL", (ASTNode)e); :}
                        | PRINT_STATEMENT:e {: RESULT = new BodyNode("PRINT-LLamada-Función", (ASTNode)e); :}
                        | READ_STATEMENT:e {: RESULT = new BodyNode("READ-Llamada-Función", (ASTNode)e); :}
                        | RETURN_STATEMENT:e {: RESULT = new BodyNode("RETURN-Declaración", (ASTNode)e); :}
                        | BREAK_STATEMENT:e {: RESULT = new BodyNode("BREAK-Declaración", (ASTNode)e); :}
                        | error  {: RESULT = new BodyNode("ERROR", new GenericASTNode("Error de sintaxis en esta posición") ); :}
                        ;

VARIABLE_DECLARATION ::= VARIABLE_TYPE:type Identifier:id EndSentence
                        {: 
                            RESULT = new VariableDeclarationNode(type.toString(), id.toString());

                            try {
                                ((VariableDeclarationNode) RESULT).parser = parser;
                                ((VariableDeclarationNode) RESULT).currentHash = currentFunction;
                                ((VariableDeclarationNode) RESULT).checkSemantics();
                                symbolTable.addVariable(id.toString(), type.toString(), currentHash, null, typeright + 1);

                            } catch (RuntimeException e) {
                                String message = e.getMessage();

                                if (message.contains("ya está definida.")) {
                                    //System.out.println(message);
                                } else {
                                    parser.logSemanticError("Error en la línea " + (typeright+1) + ": " + message);
                                }
                            }                        
                        :}
                       | VARIABLE_TYPE:type Identifier:id AssignmentSign EXPRESSION:exp EndSentence
                        {: 
                            String reducedType = ((ExpressionNode) exp).getReduceType();
                            
                            if (!reducedType.toString().equals("a")) {
                                if (!type.toString().equals(reducedType)) {
                                    // Levantar un error si los tipos no coinciden
                                    parser.logSemanticError("Error en la línea " + (typeright + 1) + ": Incompatibilidad de tipos. Se esperaba " 
                                        + type.toString() + " pero se asignó " + reducedType);
                                }
                            }
                            
                            //System.out.println(exp.toString() + " reduced to " + reducedType );

                            ExpressionNode expressionNode = new ExpressionNode(
                                ExpressionEnum.VARIABLE_DECLARATION_EXPRESSION,
                                (ASTNode) exp,
                                ((ASTNode) exp).toString()
                            );

                            RESULT = new VariableDeclarationNode(type.toString(), id.toString(), expressionNode);

                            try {
                                ((VariableDeclarationNode) RESULT).parser = parser;
                                ((VariableDeclarationNode) RESULT).currentHash = currentFunction;
                                ((VariableDeclarationNode) RESULT).checkSemantics();
                                symbolTable.addVariable(id.toString(), type.toString(), currentHash, exp.toString(), typeright + 1);

                            } catch (RuntimeException e) {
                                String message = e.getMessage();

                                if (type.equals("a") && message.contains("Incompatibilidad de tipos asignacion")) {
                                    System.out.println(message);
                                } else if (message.contains("ya está definida.")) {
                                    System.out.println(message);
                                } else {
                                    parser.logSemanticError("Error en la línea " + (idright+1) + ": " + message);
                                }
                            }                           
                        :}
                       | ARRAY_DECLARATION:arr EndSentence 
                        {:
                            RESULT =  (ArrayDeclarationNode)arr; 
                        :}
                       | ARRAY_DECLARATION:arr AssignmentSign ARRAY_ELEMENTS:elements EndSentence 
                        {: 
                            RESULT =  new ArrayDeclarationNode((ArrayDeclarationNode)arr,(ArrayElementsNode)elements); 
                        :}
                       ;

ARRAY_ELEMENTS ::= BlockOpening LITERAL_LIST:list BlockClosure
                    {: 
                        RESULT = new ArrayElementsNode((List<String>)list); 
                    :}
                 ;

ARRAY_DECLARATION ::= VARIABLE_TYPE:type Identifier:id BracketOpening BracketClosure 
                    {: 
                        RESULT = new ArrayDeclarationNode(type.toString(), id.toString());                         

                        try {
                            ((ArrayDeclarationNode) RESULT).parser = parser;
                            ((ArrayDeclarationNode) RESULT).currentHash = currentFunction;
                            ((ArrayDeclarationNode) RESULT).checkSemantics();
                            symbolTable.addVariable(id.toString(), type.toString() + "[]", currentHash, null, typeright + 1);

                        } catch (RuntimeException e) {
                            String message = e.getMessage();

                            if (message.contains("ya está definida.")) {
                                //System.out.println(message);
                            } else {
                                parser.logSemanticError("Error en la línea " + (typeright+1) + ": " + message);
                            }
                        }
                    :}
                    | VARIABLE_TYPE:type Identifier:id BracketOpening IntegerLiteral:size BracketClosure 
                    {: 
                        RESULT =  new ArrayDeclarationNode(type.toString(), id.toString(),size.toString());                    

                        try {
                            ((ArrayDeclarationNode) RESULT).parser = parser;
                            ((ArrayDeclarationNode) RESULT).currentHash = currentFunction;
                            ((ArrayDeclarationNode) RESULT).checkSemantics();
                            symbolTable.addVariable(id.toString(), type.toString() + "[" + size + "]", currentHash, null, typeright + 1);

                        } catch (RuntimeException e) {
                            String message = e.getMessage();

                            if (message.contains("ya está definida.")) {
                                //System.out.println(message);
                            } else {
                                parser.logSemanticError("Error en la línea " + (typeright+1) + ": " + message);
                            }
                        }
                    :}
                    | VARIABLE_TYPE:type Identifier:id BracketOpening Identifier:sizeId BracketClosure 
                    {: 
                        RESULT =  new ArrayDeclarationNode(type.toString(), id.toString(), sizeId.toString());                       

                        try {
                            ((ArrayDeclarationNode) RESULT).parser = parser;
                            ((ArrayDeclarationNode) RESULT).currentHash = currentFunction;
                            ((ArrayDeclarationNode) RESULT).checkSemantics();
                            symbolTable.addVariable(id.toString(), type.toString() + "[]", currentHash, null, typeright + 1);

                        } catch (RuntimeException e) {
                            String message = e.getMessage();

                            if (message.contains("ya está definida.")) {
                                //System.out.println(message);
                            } else {
                                parser.logSemanticError("Error en la línea " + (typeright+1) + ": " + message);
                            }
                        }
                    :};

ARRAY_USE ::= Identifier:id BracketOpening EXPRESSION:exp BracketClosure 
                {: 
                    ExpressionNode expressionNode = new ExpressionNode(
                                ExpressionEnum.ARRAY_USE_EXPRESSION,
                                (ASTNode) exp,
                                ((ASTNode) exp).toString()
                    );
                    RESULT = new ArrayUseNode(id.toString(), expressionNode); 
                :}
            ;

LITERAL_LIST ::= LITERALS:literal
                {: 
                    RESULT = new ArrayList<String>();
                    ((List<String>)RESULT).add(literal.toString()); 
                :}
               | LITERAL_LIST:list Comma LITERALS:literal 
                {: 
                    ((List<String>)list).add(literal.toString()); 
                    RESULT = list; 
                :}
               ;

LITERALS ::= IntegerLiteral: i {: RESULT = "Integer:" + i.toString(); :}
           | FloatLiteral: f {: RESULT = "Float:" + f.toString(); :}
           | BoolLiteral: b {: RESULT = "Bool:" + b.toString(); :}
           | CharacterLiteral: c {: RESULT = "Char:" + c.toString(); :}
           | StringLiteral: s {: RESULT = "String:" + s.toString(); :}
           ;

PRINT_STATEMENT ::= Print ParenthesisOpening EXPRESSION:exp ParenthesisClosure EndSentence 
                  {:
                    ExpressionNode expressionNode = new ExpressionNode(
                                ExpressionEnum.PRINT_EXPRESSION,
                                (ASTNode) exp,
                                ((ASTNode) exp).toString()
                    ); 
                    RESULT = new PrintFunctionCallNode(expressionNode); 
                  :}
                  ;

READ_STATEMENT ::= Read ParenthesisOpening EXPRESSION:exp ParenthesisClosure EndSentence 
                    {: 
                        ExpressionNode expressionNode = new ExpressionNode(
                                                ExpressionEnum.READ_EXPRESSION,
                                                (ASTNode) exp,
                                                ((ASTNode) exp).toString()
                                        ); 
                        RESULT = new ReadFunctionCallNode(expressionNode); 
                    :}
                 ;

BINARY_ARITHMETIC_OPERATOR ::= Sum 
                                {:
                                ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.BINARY_ARITHMETIC_OPERATOR_SUM,
                                                    null,
                                                    " + "
                                            ); 
                                RESULT = expressionNode; 
                                :}
                             | Subtraction 
                                {:
                                ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.BINARY_ARITHMETIC_OPERATOR_SUBTRACTION,
                                                    null,
                                                    " - "
                                            ); 
                                RESULT = expressionNode; 
                                :}
                             | Multiplication 
                                {:
                                ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.BINARY_ARITHMETIC_OPERATOR_MULTIPLICATION,
                                                    null,
                                                    " * "
                                            ); 
                                RESULT = expressionNode; 
                                :}
                             | Division 
                                {:
                                ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.BINARY_ARITHMETIC_OPERATOR_DIVISION,
                                                    null,
                                                    " / "
                                            ); 
                                RESULT = expressionNode; 
                                :}
                             | Module 
                                {:
                                ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.BINARY_ARITHMETIC_OPERATOR_MODULE,
                                                    null,
                                                    " % "
                                            ); 
                                RESULT = expressionNode; 
                                :}
                             | Power 
                                {:
                                ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.BINARY_ARITHMETIC_OPERATOR_POWER,
                                                    null,
                                                    " ** "
                                            ); 
                                RESULT = expressionNode; 
                                :}
                             ;

NEGATIVE_OPERATOR ::= Negative {: RESULT = "-"; :}
                    ; 

FUNCTION_CALL_PARAMETER ::= SIMPLE_EXPRESSION:exp {: RESULT = exp; :}
                        ;

FUNCTION_CALL_PARAMETER_LIST ::= FUNCTION_CALL_PARAMETER:exp 
                                    {: 
                                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.FUNCTION_CALL_PARAMETER,
                                                    (ASTNode) exp,
                                                    ((ASTNode) exp).toString()
                                        ); 
                                        RESULT = new ArrayList<ExpressionNode>(); 
                                        ((List<ExpressionNode>)RESULT).add(expressionNode);
                                    :}
                               | FUNCTION_CALL_PARAMETER_LIST:paramList Comma FUNCTION_CALL_PARAMETER:exp 
                                    {: 
                                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.FUNCTION_CALL_PARAMETER,
                                                    (ASTNode) exp,
                                                    ((ASTNode) exp).toString()
                                        ); 
                                        ((List<ExpressionNode>)paramList).add(expressionNode);
                                        RESULT = (List<ExpressionNode>)paramList; 
                                    :}
                               ;

FUNCTION_CALL_PARAMETER_OPTION ::= /* Vacío */ {: RESULT = new ArrayList<ExpressionNode>(); :}
                                 | FUNCTION_CALL_PARAMETER_LIST:parameters {: RESULT = (List<ExpressionNode>)parameters; :}
                                 ;

FUNCTION_CALL ::= FUNCTION_NAME:name ParenthesisOpening FUNCTION_CALL_PARAMETER_OPTION:parameters  ParenthesisClosure 
                    {: 
                        RESULT = new FunctionCallNode(name.toString(), (List<ExpressionNode>)parameters);
                        //System.out.println((parametersright+1) + " LLamada a funcion " + name + " con los parametros: " + parameters.toString());

                        try {
                            ((FunctionCallNode) RESULT).parser = parser;
                            ((FunctionCallNode) RESULT).currentHash = currentFunction;
                            ((FunctionCallNode) RESULT).checkSemantics();

                        } catch (RuntimeException e) {
                            String message = e.getMessage();
                            parser.logSemanticError("Error en la línea " + (parametersright+1) + ": " + message);                           
                        }

                    :}
                ;

FUNCTION_CALL_EXPRESSION ::= FUNCTION_CALL:func EndSentence {: RESULT = (ASTNode)func; :}
                           ;

NEGATIVE_LITERAL ::= NEGATIVE_OPERATOR IntegerLiteral:lit {: RESULT = "NEGATIVE-"+lit.toString(); :}
                   | NEGATIVE_OPERATOR FloatLiteral:lit {: RESULT = "NEGATIVE-"+lit.toString(); :}
                   ;

UNARY_ARITHMETIC_EXPRESSION ::= Identifier:id Increment {: RESULT = id.toString()+":" +  "++"; :}
                              | Identifier:id Decrement {: RESULT = id.toString()+ ":" + "--"; :}
                              ;


/* EXPRESSION: El nivel raíz de las expresiones */
EXPRESSION ::= LOGICAL_EXPRESSION:exp  
             {: 
                    RESULT = (ExpressionNode)exp; 
                    
                    try {
                        ((ExpressionNode) RESULT).parser = parser;
                        ((ExpressionNode) RESULT).currentHash = currentHash;
                        ((ExpressionNode) RESULT).checkSemantics();

                    } catch (RuntimeException e) {
                        String message = e.getMessage();
                        parser.logSemanticError("Error en la línea " + (expright+1) + ": " + message);                           
                    }                    
             :}
             ;

/* SIMPLE_EXPRESSION: Nivel base de las expresiones */
SIMPLE_EXPRESSION ::= Identifier:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.IDENTIFIER,
                                                     null,
                                                    " Id:" +exp.toString() + " "
                                            );  
                        RESULT = expressionNode; 
                        :}                    
                    | LITERALS:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.LITERALS,
                                                    null,
                                                    exp.toString()
                                            );  
                        RESULT = expressionNode; 
                        :}
                    | NEGATIVE_LITERAL:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.NEGATIVE_LITERAL,
                                                    null,
                                                    exp.toString()
                                            );  
                        RESULT = expressionNode; 
                        :}
                    | ARRAY_USE:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.ARRAY_USE_AS_EXPRESSION,
                                                    null,
                                                    "ArrayUse:" +
                                                    ((ArrayUseNode)exp).id+"[ " + ((ExpressionNode)((ArrayUseNode)exp).expression).expression  +" ]",
                                                    (ASTNode)exp
                                            );  
                        RESULT = expressionNode; 
                        :}
                    | FUNCTION_CALL:exp 
                        {:
                            ExpressionNode expressionNode = new ExpressionNode(
                                ExpressionEnum.FUNCTION_CALL_AS_EXPRESSION,
                                null,
                                "FunctionCall:" + 
                                ((FunctionCallNode)exp).name + "[ " + ((FunctionCallNode)exp).parameterList.toString() + " ]",
                                (ASTNode)exp
                            );  
                            RESULT = expressionNode; 
                        :}
                    | UNARY_ARITHMETIC_EXPRESSION:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.UNARY_ARITHMETIC_EXPRESSION,
                                                    null,
                                                    exp.toString()
                                            );  
                        RESULT = expressionNode; 
                        :}
                    | ParenthesisOpening EXPRESSION:exp ParenthesisClosure 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.SIMPLE_EXPRESSION,
                                                    (ExpressionNode)exp,
                                                    " ( " + ((ExpressionNode)exp).toString() + " ) "
                                            );  
                        RESULT = expressionNode; 
                        :}
                    | Negation SIMPLE_EXPRESSION:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.NEGATION_SIMPLE_EXPRESSION,
                                                    (ExpressionNode) exp,
                                                    " -" +((ExpressionNode) exp).toString()
                                            );  
                        RESULT = expressionNode; 
                        :}
                    ;

ARITHMETIC_EXPRESSION ::= SIMPLE_EXPRESSION:exp 
                            {: 
                                RESULT = exp; 
                            :}
                        | ARITHMETIC_EXPRESSION:exp1 BINARY_ARITHMETIC_OPERATOR:op ARITHMETIC_EXPRESSION:exp2 
                            {: 
                                ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.ARITHMETIC_EXPRESSION,
                                                    ((ASTNode) exp1).toString() + ((ASTNode) op).toString() + ((ASTNode) exp2).toString(),
                                                    (ASTNode) exp1,
                                                    (ASTNode) op,
                                                    (ASTNode) exp2
                                            ); 
                                RESULT = expressionNode; 
                            :}
                        ;

RELATIONAL_OPERATOR ::= Less 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.RELATIONAL_OPERATOR_LESS,
                                                    null,
                                                    " < "
                                            );  
                        RESULT = expressionNode; 
                        :}
                      | LessEqual 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.RELATIONAL_OPERATOR_LESS_EQUAL,
                                                    null,
                                                    " <= "
                                            );  
                        RESULT = expressionNode; 
                        :}
                      | Greater 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.RELATIONAL_OPERATOR_GREATER,
                                                    null,
                                                    " > "
                                            );  
                        RESULT = expressionNode; 
                        :}
                      | GreaterEqual 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.RELATIONAL_OPERATOR_GREATER_EQUAL,
                                                    null,
                                                    " >= "
                                            );  
                        RESULT = expressionNode; 
                        :}
                      | Equal 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.RELATIONAL_OPERATOR_EQUAL,
                                                    null,
                                                    " == "
                                            );  
                        RESULT = expressionNode; 
                        :}
                      | NotEqual 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.RELATIONAL_OPERATOR_NOT_EQUAL,
                                                    null,
                                                    " != "
                                            );  
                        RESULT = expressionNode; 
                        :}
                      ;

RELATIONAL_EXPRESSION ::= ARITHMETIC_EXPRESSION:exp 
                          {: 
                            RESULT = (ASTNode)exp; 
                          :}
                        | RELATIONAL_EXPRESSION:exp1 RELATIONAL_OPERATOR:op RELATIONAL_EXPRESSION:exp2 
                          {: 
                           ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.RELATIONAL_EXPRESSION,
                                                    ((ASTNode) exp1).toString()  + ((ASTNode) op).toString()  + ((ASTNode) exp2).toString() ,
                                                    (ASTNode) exp1,
                                                    (ASTNode) op,
                                                    (ASTNode) exp2
                                            ); 
                           RESULT = expressionNode; 
                          :}
                        ;

LOGICAL_OPERATOR ::= Conjunction 
                    {: 
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.LOGICAL_OPERATOR_CONJUNCTION,
                                                    null,
                                                    " && "
                                            ); 
                        RESULT = expressionNode; 
                    :}
                   | Disjunction 
                     {: 
                         ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.LOGICAL_OPERATOR_DISJUCTION,
                                                    null,
                                                    " || "
                                            ); 
                        RESULT = expressionNode; 
                     :}
                   ;

LOGICAL_EXPRESSION ::= RELATIONAL_EXPRESSION:exp 
                        {: 
                            RESULT = (ExpressionNode)exp; 
                        :}                     
                     | LOGICAL_EXPRESSION:exp1 LOGICAL_OPERATOR:op LOGICAL_EXPRESSION:exp2 
                        {: 
                            ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.LOGICAL,
                                                    ((ASTNode) exp1).toString() + ((ASTNode) op).toString()  + ((ASTNode) exp2).toString() ,
                                                    (ASTNode) exp1,
                                                    (ASTNode) op,
                                                    (ASTNode) exp2
                                            ); 
                            RESULT = expressionNode;
                        :}
                     ;

VARIABLE_ASSIGNMENT ::= Identifier:id AssignmentSign EXPRESSION:exp EndSentence 
                        {:
                            String reducedType = ((ExpressionNode) exp).getReduceType();                           

                            ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.VARIABLE_ASSIGNMENT_EXPRESSION,
                                                    (ASTNode) exp,
                                                    ((ASTNode) exp).toString()
                                            ); 
                            RESULT = new VariableAssignmentNode(id.toString(), expressionNode);
                            try {
                                ((VariableAssignmentNode) RESULT).parser = parser;
                                ((VariableAssignmentNode) RESULT).currentHash = currentHash;
                                ((VariableAssignmentNode) RESULT).reducedType = reducedType;

                                ((VariableAssignmentNode) RESULT).checkSemantics();
                                symbolTable.updateVariableValue(id.toString(), currentHash, exp.toString());

                            } catch (RuntimeException e) {
                                String message = e.getMessage();

                                if (reducedType.equals("a") && message.contains("Incompatibilidad")) {
                                    System.out.println(message);
                                } else if (message.contains("ya está definida.")) {
                                    System.out.println(message);
                                } else {
                                    parser.logSemanticError("Error en la línea " + (idright+1) + ": " + message);
                                }
                            }
                        :}
                      | UNARY_ARITHMETIC_EXPRESSION:exp EndSentence 
                        {: 
                            RESULT = new VariableAssignmentNode(exp.toString());
                        :}
                      | Identifier:id AssignmentSign ARRAY_ELEMENTS:elements EndSentence //Para asignación de arreglo de elementos
                        {: 
                            RESULT = new VariableAssignmentNode(id.toString(), (ArrayElementsNode)elements);
                            try {
                                ((VariableAssignmentNode) RESULT).parser = parser;
                                ((VariableAssignmentNode) RESULT).currentHash = currentHash;
                                ((VariableAssignmentNode) RESULT).checkSemantics();
                                symbolTable.updateVariableValue(id.toString(), currentHash, elements);

                            } catch (RuntimeException e) {
                                String message = e.getMessage();

                                if (message.contains("ya está definida.")) {
                                    //System.out.println(message);
                                } else {
                                    parser.logSemanticError("Error en la línea " + (idright+1) + ": " + message);
                                }
                            }
                        :}
                      | ARRAY_USE:arr AssignmentSign EXPRESSION:exp EndSentence //Para asignación de un elemento en el arreglo
                        {: 
                            ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.ARRAY_USE_EXPRESSION,
                                                    (ASTNode) exp,
                                                    ((ASTNode) exp).toString()
                                        ); 
                            RESULT = new VariableAssignmentNode((ArrayUseNode)arr, expressionNode); 
                        :}
                      ;

CONTROL_STRUCTURE ::= IF_ELSE_STRUCTURE_TYPE:c {: RESULT = (ASTNode)c; :}
                    | WHILE_STRUCTURE:c {: RESULT = (ASTNode)c; :}
                    | FOR_STRUCTURE:c {: RESULT = (ASTNode)c; :}
                    | SWITCH_STRUCTURE:c {: RESULT = (ASTNode)c; :}
                    ;

IF_STRUCTURE ::= If ParenthesisOpening LOGICAL_EXPRESSION:exp ParenthesisClosure BlockOpening 
               {: 
                    symbolTable.enterBlock(currentFunction, "if"); 
                    currentHash = symbolTable.getCurrentBlockIdentifier();
               :}
                 FUNCTION_DECLARATION_BODY:thenBody BlockClosure
               {: 
                   symbolTable.exitBlock(); 
                   currentHash = symbolTable.getCurrentBlockIdentifier(); 

                   ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.CONTROL_STRUCTURE_CONDITION,
                                                    (ASTNode) exp,
                                                    ((ASTNode) exp).toString()
                                            ); 
                   RESULT = new IfStatementNode(expressionNode, (List<BodyNode>)thenBody);
               :}
               ;

ELSE_STRUCTURE ::= Else BlockOpening 
                    {: 
                        symbolTable.enterBlock(currentFunction, "else"); 
                        currentHash = symbolTable.getCurrentBlockIdentifier();
                    :}
                    FUNCTION_DECLARATION_BODY:elseBody BlockClosure 
                    {:                     
                        symbolTable.exitBlock(); 
                        currentHash = symbolTable.getCurrentBlockIdentifier(); 
                        RESULT = (List<BodyNode>)elseBody;
                    :}
                 ;

ELSE_IF_STRUCTURE ::= Else If ParenthesisOpening LOGICAL_EXPRESSION:condition ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY:thenBody BlockClosure 
                        {: 
                            RESULT = new ArrayList<IfStatementNode>();
                            ((ArrayList<IfStatementNode>)RESULT).add(new IfStatementNode((ExpressionNode)condition, (List<BodyNode>)thenBody));
                        :}
                    | ELSE_IF_STRUCTURE:elIfChain ELSE_STRUCTURE:elseBody 
                        {: 
                            ((ArrayList<IfStatementNode>)elIfChain).add(new IfStatementNode((List<BodyNode>)elseBody));//caso 4 IfStatementNode
                            RESULT = (ArrayList<IfStatementNode>)elIfChain; 
                        :}
                    ;

IF_ELSE_STRUCTURE_TYPE ::= IF_STRUCTURE:ifNode 
                          {: 
                              RESULT = (IfStatementNode)ifNode; 
                          :}
                         | IF_STRUCTURE:ifNode ELSE_STRUCTURE:elseBody 
                          {: 
                              RESULT = new IfStatementNode((IfStatementNode)ifNode, (List<BodyNode>)elseBody); 
                          :}
                         | IF_STRUCTURE:ifNode ELSE_IF_STRUCTURE:elseIfChain
                          {: 
                              RESULT = new IfStatementNode((IfStatementNode)ifNode, (List<IfStatementNode>)elseIfChain, 3); 
                          :}
                         ;

WHILE_STRUCTURE ::= While ParenthesisOpening LOGICAL_EXPRESSION:exp ParenthesisClosure BlockOpening 
                  {: 
                        symbolTable.enterBlock(currentFunction, "while"); 
                        currentHash = symbolTable.getCurrentBlockIdentifier(); 
                  :}
                    FUNCTION_DECLARATION_BODY:body BlockClosure
                  {: 
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.CONTROL_STRUCTURE_CONDITION,
                                                    (ASTNode) exp,
                                                    ((ASTNode) exp).toString()
                                                ); 
                        RESULT = new WhileStatementNode(expressionNode,( List<BodyNode>)body);

                        symbolTable.exitBlock(); 
                        currentHash = symbolTable.getCurrentBlockIdentifier(); 
                  :}
                   ;

FOR_STRUCTURE ::= For ParenthesisOpening INIT_FOR_STRUCTURE:init LOGICAL_EXPRESSION:exp EndSentence UPDATE_EXPRESSION:updateExp ParenthesisClosure BlockOpening 
                {:
                      symbolTable.enterBlock(currentFunction, "for");
                      currentHash = symbolTable.getCurrentBlockIdentifier();
                :}                
                  FUNCTION_DECLARATION_BODY:body BlockClosure
                {: 
                      ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.CONTROL_STRUCTURE_CONDITION,
                                                    (ASTNode) exp,
                                                    ((ASTNode) exp).toString()
                                                ); 
                      RESULT = new ForStatementNode((ASTNode)init, expressionNode, (VariableAssignmentNode)updateExp, (List<BodyNode>)body);

                      symbolTable.exitBlock();
                      currentHash = symbolTable.getCurrentBlockIdentifier();
                :}
                ;

INIT_FOR_STRUCTURE ::= VARIABLE_DECLARATION:varDecl {: RESULT =  varDecl; :}
                     | VARIABLE_ASSIGNMENT:varAssig {: RESULT = varAssig; :}
                     ;

UPDATE_EXPRESSION ::= UNARY_ARITHMETIC_EXPRESSION :exp
                      {: 
                        RESULT = new VariableAssignmentNode(exp.toString()); 
                      :}
                    | Identifier:id AssignmentSign EXPRESSION:exp 
                      {: 
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.UPDATE_EXPRESSION,
                                                    (ASTNode) exp,
                                                    ((ASTNode) exp).toString()
                                                ); 
                        RESULT = new VariableAssignmentNode(id.toString(), expressionNode);  
                      :}
                    ;

SWITCH_STRUCTURE ::= Switch ParenthesisOpening SWITCH_EXPRESSION:exp ParenthesisClosure BlockOpening
                   {: 
                         symbolTable.enterBlock(currentFunction, "switch"); 
                         currentHash = symbolTable.getCurrentBlockIdentifier();
                         currentSwitch = currentHash;
                   :}
                     CASES:caseList  BlockClosure
                   {: 
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.SWITCH_EXPRESSION,
                                                    (ASTNode) exp,
                                                    ((ASTNode) exp).toString()
                                                ); 
                         RESULT = new SwitchStatementNode(expressionNode, (List<SwitchCaseNode>)caseList);

                         symbolTable.exitBlock(); 
                         currentHash = symbolTable.getCurrentBlockIdentifier(); 
                   :}
                    ;

CASES ::= CASE:caseNode 
            {: 
                RESULT = new ArrayList<SwitchCaseNode>(); 
                ((List<SwitchCaseNode>)RESULT).add((SwitchCaseNode)caseNode);
            :}
        |  CASES:caseList CASE:caseNode
            {: 
                RESULT = (List<SwitchCaseNode>) caseList;
               ((List<SwitchCaseNode>) RESULT).add((SwitchCaseNode)caseNode);
            :}
        ;

CASE ::= Case CASE_LABEL:exp Colon 
            {: 
                    symbolTable.enterBlock(currentSwitch, "case"); 
                    currentHash = symbolTable.getCurrentBlockIdentifier();       
            :}
                FUNCTION_DECLARATION_BODY:body
            {: 
                    ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.CASE_LABEL,
                                                    (ASTNode) exp,
                                                    ((ASTNode) exp).toString()
                                                ); 
                    RESULT = new SwitchCaseNode("Case", expressionNode, (List<BodyNode>)body);

                    symbolTable.exitBlock(); 
                    currentHash = symbolTable.getCurrentBlockIdentifier(); 
            :} 
       | DEFAULT_CASE:defaultCase 
            {: 
                RESULT = (SwitchCaseNode)defaultCase; 
            :}
       ;

DEFAULT_CASE ::= Default Colon 
               {: 
                     symbolTable.enterBlock(currentSwitch, "default"); 
                     currentHash = symbolTable.getCurrentBlockIdentifier();       
               :}                 
                 FUNCTION_DECLARATION_BODY:body
               {: 
                     ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.CASE_LABEL,
                                                    null,
                                                    "Default"
                                                );
                     RESULT = new SwitchCaseNode("Default", expressionNode, (List<BodyNode>)body);

                     symbolTable.exitBlock(); 
                     currentHash = symbolTable.getCurrentBlockIdentifier(); 
               :} 
                ;

SWITCH_EXPRESSION ::= Identifier:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.IDENTIFIER,
                                                     null,
                                                    " Id:" +exp.toString() + " "
                                            );  
                        RESULT = expressionNode; 
                        :}                      
                    | IntegerLiteral:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.LITERALS,
                                                    null,
                                                    "Integer:" + exp.toString()
                                            );  
                        RESULT = expressionNode; 
                        :}
                    | CharacterLiteral:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.LITERALS,
                                                    null,
                                                    "Char:" + exp.toString()
                                            );  
                        RESULT = expressionNode; 
                        :}
                    | ARRAY_USE:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.ARRAY_USE_AS_EXPRESSION,
                                                    null,
                                                    ((ArrayUseNode)exp).id+"[ " + ((ExpressionNode)((ArrayUseNode)exp).expression).expression  +" ]",
                                                    (ASTNode)exp
                                            );  
                        RESULT = expressionNode; 
                        :}
                    | FUNCTION_CALL:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.FUNCTION_CALL_AS_EXPRESSION,
                                                    null,
                                                    "FunctionCall: " + ((FunctionCallNode)exp).name+"[ " + ((FunctionCallNode)exp).parameterList.toString() +" ]",
                                                    (ASTNode)exp
                                            );  
                        RESULT = expressionNode; 
                        :}
                    | UNARY_ARITHMETIC_EXPRESSION:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.UNARY_ARITHMETIC_EXPRESSION,
                                                    null,
                                                    exp.toString()
                                            );  
                        RESULT = expressionNode; 
                        :}
                    | ParenthesisOpening EXPRESSION:exp ParenthesisClosure 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.SIMPLE_EXPRESSION,
                                                    (ExpressionNode)exp,
                                                    " ( " + ((ExpressionNode)exp).toString() + " ) "
                                            );  
                        RESULT = expressionNode; 
                        :}
                    ;

CASE_LABEL ::= Identifier:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.IDENTIFIER,
                                                     null,
                                                    " Id:" +exp.toString() + " "
                                            );  
                        RESULT = expressionNode; 
                        :}                        
             | IntegerLiteral:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.LITERALS,
                                                    null,
                                                    "Integer:" + exp.toString()
                                            );  
                        RESULT = expressionNode; 
                        :}
             | CharacterLiteral:exp 
                        {:
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.LITERALS,
                                                    null,
                                                    "Char:" + exp.toString()
                                            );  
                        RESULT = expressionNode; 
                        :}
             ;


RETURN_STATEMENT ::= Return EndSentence 
                    {: 
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.RETURN_EXPRESSION,
                                                    null,
                                                    "Retorno Vacío"
                                                ); 
                        RESULT = new ReturnStatementNode(expressionNode);  
                    :}
                   | Return EXPRESSION:exp EndSentence 
                    {:
                        String reducedType = ((ExpressionNode) exp).getReduceType();

                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.RETURN_EXPRESSION,
                                                    (ASTNode) exp,
                                                    ((ASTNode) exp).toString()
                                                ); 
                        RESULT = new ReturnStatementNode(expressionNode);

                        try {
                            ((ReturnStatementNode) RESULT).parser = parser;
                            ((ReturnStatementNode) RESULT).currentHash = currentHash;
                            ((ReturnStatementNode) RESULT).reducedType = reducedType;

                            ((ReturnStatementNode) RESULT).checkSemantics();

                        } catch (RuntimeException e) {
                            String message = e.getMessage();
                            parser.logSemanticError("Error en la línea " + (expright+1) + ": " + message);
                        }
                    :}
                   ;

BREAK_STATEMENT ::= Break EndSentence 
                    {: 
                        ExpressionNode expressionNode = new ExpressionNode(
                                                    ExpressionEnum.BREAK_EXPRESSION,
                                                    null,
                                                    "Break-Statement"
                                                ); 
                        RESULT = expressionNode; 
                    :}
                  ;
